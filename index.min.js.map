{"version":3,"sources":["js/index.js"],"names":["existingSubscriber","document","addEventListener","params","name","email","calendarNotifications","URLSearchParams","window","location","search","get","querySelector","value","innerHTML","setAttribute","e","preventDefault","form","subscribeObj","preferredName","statusEl","innerText","fetch","body","JSON","stringify","method","then","response","json","data","console","log","statusText","message","statusType","success","alreadySubscribedMessage","sendyText","type","text","forEach","obj","includes","catch","error","submitForm","target"],"mappings":"2FA6CA,IAAIA,GAAqB,EAwBzBC,SAASC,iBAAiB,oBAAoB,WAtB9C,IACUC,EACAC,EACAC,EACAC,EAHAH,EAAS,IAAII,gBAAgBC,OAAOC,SAASC,QAC7CN,EAAOD,EAAOQ,IAAI,QAClBN,EAAQF,EAAOQ,IAAI,SACnBL,EAAwBH,EAAOQ,IAAI,yBACtCP,IACCH,SAASW,cAAc,SAASC,MAAQT,GAEzCC,IACCJ,SAASW,cAAc,sBAAsBE,WAAa,mJAC1Db,SAASW,cAAc,UAAUC,MAAQR,EACzCJ,SAASW,cAAc,UAAUG,aAAa,WAAY,KAE3DT,IACCL,SAASW,cAAc,2BAA2BC,MAAQP,IAE3DF,GAAQC,KACPL,GAAqB,EACrBC,SAASW,cAAc,wBAAwBC,MAAQ,aAyE/DZ,SAASW,cAAc,cAAcV,iBAAiB,UAAU,SAACc,GAC7DA,EAAEC,iBA3DN,SAAoBC,GAEhB,IAAIC,EAAe,GAEnBA,EAAaf,KAAOc,EAAKN,cAAc,SAASC,MAChDM,EAAad,MAAQa,EAAKN,cAAc,UAAUC,MAE9CK,EAAKN,cAAc,qBACnBO,EAAaC,cAAgBF,EAAKN,cAAc,mBAAmBC,OAEnEK,EAAKN,cAAc,6BACnBO,EAAab,sBAAwBY,EAAKN,cAAc,2BAA2BC,OAIvF,IAAMQ,EAAWpB,SAASW,cAAc,WACxCS,EAASN,aAAa,QAAS,eAC/BM,EAASC,UAAY,iBAGrBC,MAAM,+BAAgC,CAClCC,KAAMC,KAAKC,UAAUP,GACrBQ,OAAQ,SACTC,MAAK,SAAAC,GACJ,OAAOA,EAASC,UACjBF,MAAK,SAAAG,GACJC,QAAQC,IAAIF,GAEZ,IAAIG,EAAaH,EAAKI,QAASC,EAAa,GAC5C,GAAoB,GAAhBL,EAAKM,QACLH,EAAU,mCACVE,EAAa,cACV,CACH,IAAIE,EAA2B,CAC3BC,UAAW,qBACXC,KAAM,OACNC,KAAI,kDAEmC,KAAvCtB,EAAab,uBAAsD,GAAtBN,IAC7CsC,EAAyBG,KAAzB,+CAEkB,CAACH,GACTI,SAAQ,SAAAC,GACdZ,EAAKI,QAAQS,SAASD,EAAIJ,aAC1BL,EAAaS,EAAIF,KACjBL,EAAaO,EAAIH,SAI7BnB,EAASC,UAAYY,EACrBb,EAASN,aAAa,QAASqB,MAElCS,OAAO,SAACC,GACLzB,EAASC,UAAT,qIACAD,EAASN,aAAa,QAAS,YAMnCgC,CAAW/B,EAAEgC","sourcesContent":["/* \n    Set preferred/short name\n*/\n\nfunction setPreferredName() {\n    const fullName = document.querySelector('#name')\n    const preferredNameContainer = document.querySelector('label[for=\"preferred-name\"]')\n    const inputSizer = document.querySelector('span.input-sizer[data-field=\"preferred-name\"]')\n    const preferredName = document.querySelector('#preferred-name')\n    if (!fullName.value || fullName.value === \"\") {\n        preferredNameContainer.setAttribute('data-active', 'false')\n        preferredName.value = \"\"\n        inputSizer.innerText = \"\"\n    } else {\n        const shortName = fullName.value.split(/\\s/)\n        preferredName.value = shortName[0]\n        inputSizer.innerText = shortName[0]\n        // Set reveal timeout\n        if (preferredNameContainer.getAttribute('data-active') === 'false') {\n            setTimeout(() => {\n                preferredNameContainer.setAttribute('data-active', 'true')\n            }, 1500)\n        } else {\n            preferredNameContainer.setAttribute('data-active', 'true')\n        }\n    }\n    sizePreferredName()\n}\n\nfunction sizePreferredName() {\n    const inputSizer = document.querySelector('span.input-sizer[data-field=\"preferred-name\"]')\n    const preferredName = document.querySelector('#preferred-name')\n    preferredName.style.width = `${inputSizer.offsetWidth + 15}px`\n}\n\n/*\nsetPreferredName()\nsizePreferredName()\ndocument.querySelector('#name').addEventListener('keyup', setPreferredName)\ndocument.querySelector('#preferred-name').addEventListener('keyup', (e) => {\n    document.querySelector('span.input-sizer[data-field=\"preferred-name\"]').innerText = e.target.value\n    sizePreferredName()\n})\n*/\n\nlet existingSubscriber = false\n\nfunction handleURLParams() {\n    const params = new URLSearchParams(window.location.search)\n    const name = params.get('name')\n    const email = params.get('email')\n    const calendarNotifications = params.get('calendarNotifications')\n    if(name) {\n        document.querySelector('#name').value = name\n    }\n    if(email) {\n        document.querySelector('label[for=\"email\"]').innerHTML += '<p class=\"email-update\">Need to update your email address? Contact us at <a href=\"mailto:info@adventproject.org\">info@adventproject.org</a>.</p>'\n        document.querySelector('#email').value = email\n        document.querySelector('#email').setAttribute(\"disabled\", '')\n    }\n    if(calendarNotifications) {\n        document.querySelector('#calendar-notifications').value = calendarNotifications\n    }\n    if(name || email) {\n        existingSubscriber = true\n        document.querySelector('input[type=\"submit\"]').value = \"Update\"\n    }\n}\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n    handleURLParams()\n})\n\n\n\n\n/* \n    Handle form submission \n*/\n\nfunction submitForm(form) {\n\n    let subscribeObj = {}\n\n    subscribeObj.name = form.querySelector('#name').value\n    subscribeObj.email = form.querySelector('#email').value\n\n    if( form.querySelector('#preferred-name') ) {\n        subscribeObj.preferredName = form.querySelector('#preferred-name').value\n    }\n    if( form.querySelector('#calendar-notifications') ) {\n        subscribeObj.calendarNotifications = form.querySelector('#calendar-notifications').value\n    }\n    \n    // Get status text element\n    const statusEl = document.querySelector('#status')\n    statusEl.setAttribute('class', 'subscribing')\n    statusEl.innerText = 'Subscribing...'\n    \n    // take the data and post to the netlify function\n    fetch('.netlify/functions/subscribe', {\n        body: JSON.stringify(subscribeObj),\n        method: 'POST'\n    }).then(response => {\n        return response.json()\n    }).then(data => {\n        console.log(data)\n        // Map terse Sendy API responses to friendly messages\n        let statusText = data.message, statusType = ''\n        if( data.success == true ) {\n            statusText = `ðŸŽ‰ Subscribed! Talk to you soon.`\n            statusType = 'success'\n        } else {\n            let alreadySubscribedMessage = {\n                sendyText: 'Already subscribed',\n                type: 'info',\n                text: `You're already subscribed! Thanks for reading.`\n            }\n            if( subscribeObj.calendarNotifications !== \"\" || existingSubscriber == true ) {\n                alreadySubscribedMessage.text = `Thanks! Your preferences have been updated.`\n            }\n            const errorMessages = [alreadySubscribedMessage]\n            errorMessages.forEach(obj => {\n                if( data.message.includes(obj.sendyText) ) {\n                    statusText = obj.text\n                    statusType = obj.type\n                }\n            })\n        }\n        statusEl.innerText = statusText\n        statusEl.setAttribute('class', statusType)        \n    })\n    .catch( (error) => {\n        statusEl.innerText = `There was an issue connecting to our system. Sorry! Please email us at info@adventproject.org, and we can update your information.`\n        statusEl.setAttribute('class', 'error')\n    } )\n}\n\ndocument.querySelector('#subscribe').addEventListener('submit', (e) => {\n    e.preventDefault()\n    submitForm(e.target)\n})"]}