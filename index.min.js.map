{"version":3,"sources":["js/index.js"],"names":["setPreferredName","fullName","document","querySelector","preferredNameContainer","inputSizer","preferredName","value","shortName","split","innerText","getAttribute","setTimeout","setAttribute","sizePreferredName","style","width","concat","offsetWidth","addEventListener","e","target","form","name","email","statusEl","preventDefault","fetch","body","JSON","stringify","method","then","response","json","data","console","log","statusText","message","statusType","success","sendyText","type","text","forEach","obj","includes"],"mappings":"2FAIA,SAASA,IACL,IAAMC,EAAWC,SAASC,cAAc,SAClCC,EAAyBF,SAASC,cAAc,+BAChDE,EAAaH,SAASC,cAAc,iDACpCG,EAAgBJ,SAASC,cAAc,mBAC7C,GAAKF,EAASM,OAA4B,KAAnBN,EAASM,MAIzB,CACH,IAAMC,EAAYP,EAASM,MAAME,MAAM,MACvCH,EAAcC,MAAQC,EAAU,GAChCH,EAAWK,UAAYF,EAAU,GAE0B,UAAvDJ,EAAuBO,aAAa,eACpCC,YAAW,WACPR,EAAuBS,aAAa,cAAe,UACpD,MAEHT,EAAuBS,aAAa,cAAe,aAbvDT,EAAuBS,aAAa,cAAe,SACnDP,EAAcC,MAAQ,GACtBF,EAAWK,UAAY,GAc3BI,IAGJ,SAASA,IACL,IAAMT,EAAaH,SAASC,cAAc,iDACpBD,SAASC,cAAc,mBAC/BY,MAAMC,MAApB,GAAAC,OAA+BZ,EAAWa,YAAc,GAAxD,MAGJlB,IACAc,IACAZ,SAASC,cAAc,SAASgB,iBAAiB,QAASnB,GAC1DE,SAASC,cAAc,mBAAmBgB,iBAAiB,SAAS,SAACC,GACjElB,SAASC,cAAc,iDAAiDO,UAAYU,EAAEC,OAAOd,MAC7FO,OAwDJZ,SAASC,cAAc,cAAcgB,iBAAiB,UAAU,SAACC,GAhDjE,IAAoBE,EAGVC,EACAC,EACAlB,EAGAmB,EAyCNL,EAAEM,iBAjDcJ,EAkDLF,EAAEC,OA/CPE,EAAOD,EAAKnB,cAAc,SAASI,MACnCiB,EAAQF,EAAKnB,cAAc,UAAUI,MACrCD,EAAgBgB,EAAKnB,cAAc,mBAAmBI,OAGtDkB,EAAWvB,SAASC,cAAc,YAC/BU,aAAa,QAAS,eAC/BY,EAASf,UAAY,iBAGrBiB,MAAM,+BAAgC,CAClCC,KAAMC,KAAKC,UAAU,CACjBP,KAAQA,EACRC,MAASA,EACTlB,cAAiBA,IAErByB,OAAQ,SACTC,MAAK,SAAAC,GACJ,OAAOA,EAASC,UACjBF,MAAK,SAAAG,GACJC,QAAQC,IAAIF,GAEZ,IAAIG,EAAaH,EAAKI,QAASC,EAAa,GAOxB,GAAhBL,EAAKM,SACLH,EAAU,mCACVE,EAAa,WARK,CAAC,CACfE,UAAW,qBACXC,KAAM,OACNC,KAAI,mDAOMC,SAAQ,SAAAC,GACdX,EAAKI,QAAQQ,SAASD,EAAIJ,aAC1BJ,EAAaQ,EAAIF,KACjBJ,EAAaM,EAAIH,SAI7BlB,EAASf,UAAY4B,EACrBb,EAASZ,aAAa,QAAS2B","sourcesContent":["/* \n    Set preferred/short name\n*/\n\nfunction setPreferredName() {\n    const fullName = document.querySelector('#name')\n    const preferredNameContainer = document.querySelector('label[for=\"preferred-name\"]')\n    const inputSizer = document.querySelector('span.input-sizer[data-field=\"preferred-name\"]')\n    const preferredName = document.querySelector('#preferred-name')\n    if (!fullName.value || fullName.value === \"\") {\n        preferredNameContainer.setAttribute('data-active', 'false')\n        preferredName.value = \"\"\n        inputSizer.innerText = \"\"\n    } else {\n        const shortName = fullName.value.split(/\\s/)\n        preferredName.value = shortName[0]\n        inputSizer.innerText = shortName[0]\n        // Set reveal timeout\n        if (preferredNameContainer.getAttribute('data-active') === 'false') {\n            setTimeout(() => {\n                preferredNameContainer.setAttribute('data-active', 'true')\n            }, 1500)\n        } else {\n            preferredNameContainer.setAttribute('data-active', 'true')\n        }\n    }\n    sizePreferredName()\n}\n\nfunction sizePreferredName() {\n    const inputSizer = document.querySelector('span.input-sizer[data-field=\"preferred-name\"]')\n    const preferredName = document.querySelector('#preferred-name')\n    preferredName.style.width = `${inputSizer.offsetWidth + 15}px`\n}\n\nsetPreferredName()\nsizePreferredName()\ndocument.querySelector('#name').addEventListener('keyup', setPreferredName)\ndocument.querySelector('#preferred-name').addEventListener('keyup', (e) => {\n    document.querySelector('span.input-sizer[data-field=\"preferred-name\"]').innerText = e.target.value\n    sizePreferredName()\n})\n\n\n/* \n    Handle form submission \n*/\n\nfunction submitForm(form) {\n\n    // Get fields\n    const name = form.querySelector('#name').value\n    const email = form.querySelector('#email').value\n    const preferredName = form.querySelector('#preferred-name').value\n\n    // Get status text element\n    const statusEl = document.querySelector('#status')\n    statusEl.setAttribute('class', 'subscribing')\n    statusEl.innerText = 'Subscribing...'\n\n    // take the data and post to the netlify function\n    fetch('.netlify/functions/subscribe', {\n        body: JSON.stringify({\n            'name': name,\n            'email': email,\n            'preferredName': preferredName\n        }),\n        method: 'POST'\n    }).then(response => {\n        return response.json()\n    }).then(data => {\n        console.log(data)\n        // Map terse Sendy API responses to friendly messages\n        let statusText = data.message, statusType = ''\n        const sendyMessages = [{\n                sendyText: 'Already subscribed',\n                type: 'info',\n                text: `You're already subscribed! Thanks for reading.`\n            }\n        ]\n        if( data.success == true ) {\n            statusText = `🎉 Subscribed! Talk to you soon.`\n            statusType = 'success'\n        } else {\n            sendyMessages.forEach(obj => {\n                if( data.message.includes(obj.sendyText) ) {\n                    statusText = obj.text\n                    statusType = obj.type\n                }\n            })\n        }\n        statusEl.innerText = statusText\n        statusEl.setAttribute('class', statusType)        \n    })\n}\n\ndocument.querySelector('#subscribe').addEventListener('submit', (e) => {\n    e.preventDefault()\n    submitForm(e.target)\n})"]}